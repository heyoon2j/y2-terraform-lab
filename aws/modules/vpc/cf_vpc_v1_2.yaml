---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_Single_Instance_In_Subnet: Sample
  template showing how to create a VPC and add an EC2 instance with an Elastic
  IP address and a security group. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a
  stack from this template.
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.16.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.16.0.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      AdditionalInfo: String
      Affinity: String
      AvailabilityZone: String
      BlockDeviceMappings: 
        - BlockDeviceMapping
      CpuOptions: 
        CpuOptions
      CreditSpecification: 
        CreditSpecification
      DisableApiTermination: Boolean
      EbsOptimized: Boolean
      ElasticGpuSpecifications: 
        - ElasticGpuSpecification
      ElasticInferenceAccelerators: 
        - ElasticInferenceAccelerator
      EnclaveOptions: 
        EnclaveOptions
      HibernationOptions: 
        HibernationOptions
      HostId: String
      HostResourceGroupArn: String
      IamInstanceProfile: String
      ImageId: String
      InstanceInitiatedShutdownBehavior: String
      InstanceType: String
      Ipv6AddressCount: Integer
      Ipv6Addresses: 
        - InstanceIpv6Address
      KernelId: String
      KeyName: String
      LaunchTemplate: 
        LaunchTemplateSpecification
      LicenseSpecifications: 
        - LicenseSpecification
      Monitoring: Boolean
      NetworkInterfaces: 
        - NetworkInterface
      PlacementGroupName: String
      PrivateIpAddress: String
      RamdiskId: String
      SecurityGroupIds: 
        - String
      SecurityGroups: 
        - String
      SourceDestCheck: Boolean
      SsmAssociations: 
        - SsmAssociation
      SubnetId: String
      Tags: 
        - Tag
      Tenancy: String
      UserData: String
      Volumes: 
        - Volume
  
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: 'ami-00be885d550dcee43'
      InstanceType: 't2.micro'
      # KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
      UserData: |
        #!/bin/bash
        sudo useradd -G wheel sysadmin -m -u 520
        sudo echo 'Krpricing!12' | passwd --stdin sysadmin
        sudo echo "sysadmin ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/90-cloud-init-users
        sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        sudo rm /etc/localtime
        sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime
        sudo systemctl restart sshd.service > /dev/null 2>&1;
        sudo yum install -y nginx
        sudo systemctl start nginx.service
...